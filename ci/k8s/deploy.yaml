apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: bms
  name: bms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bms
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: bms
    spec:
      containers:
      - image: fade2333/bms
        name: bms
        resources: {}
        ports: 
        - containerPort: 8080
        imagePullPolicy: Always
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: ${MYSQL_ROOT_PASSWORD}
      - image: mysql:8.0.29
        name: mysql
        resources: {}
        ports:
        - containerPort: 3306
        env: 
          - name: MYSQL_ROOT_PASSWORD
            value: ${MYSQL_ROOT_PASSWORD}
        volumeMounts:
          - name: db-scripts
            mountPath: /docker-entrypoint-initdb.d/
      volumes:
        - name: db-scripts
          nfs:
            path: ${NFS_PATH}
            server: ${NFS_HOST}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: bms
  name: bms
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: bms
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: v1
data:
  tls.crt: ${BMS_CERT}
  tls.key: ${BMS_KEY}
kind: Secret
metadata:
  creationTimestamp: null
  name: bms
type: kubernetes.io/tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bms
spec: 
  tls:
  - hosts:
    - bms.yzj.icu
    secretName: bms
  rules:
  - host: bms.yzj.icu
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: bms
            port:
              number: 8080